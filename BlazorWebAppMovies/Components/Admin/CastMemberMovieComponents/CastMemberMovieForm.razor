<h1>@Mode CastMemberMovie</h1>

<hr />
@if (CastMemberMovie is not null)
{
    <EditForm Model="CastMemberMovie" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))" OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h2>Cast Member</h2>
        <p>
            <label>
                Cast Member:
                <InputSelect @bind-Value="SelectedCastMemberId" @oninput="HandleCastMemberChange" class="form-select">
                    <option value="">-- Select Cast Member --</option>
                    @foreach (var castMember in CastMemberList)
                    {
                        <option value="@castMember.Id">@castMember?.Name1 @castMember?.Name2</option>
                    }
                </InputSelect>
            </label>
        </p>
        <h2>Movie</h2>
        <p>
            <label>
                Movie:
                <InputSelect @bind-Value="SelectedMovieId" @oninput="HandleMovieChange" class="form-select">
                    <option value="">-- Select Movie --</option>
                    @foreach (var movie in MovieList)
                    {
                        <option value="@movie.Id">@movie?.Title</option>
                    }
                </InputSelect>
            </label>
        </p>
        @* PropertyFormCodePlaceholder *@

        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public CastMemberMovie? CastMemberMovie { get; set; }

    [Parameter]
    public CastMemberMovie? DbCastMemberMovie { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string Mode => IsAdd ? "Add" : "Edit";

    [Parameter]
    public List<CastMember> CastMemberList { get; set; } = new List<CastMember>();
    private Guid SelectedCastMemberId;
    [Parameter]
    public List<Movie> MovieList { get; set; } = new List<Movie>();
    private Guid SelectedMovieId;
    @* DeclareListCodePlaceholder *@

    protected override void OnInitialized()
    {
        if (CastMemberMovie?.CastMember != null && !IsAdd)
        {
            SelectedCastMemberId = CastMemberMovie.CastMember.Id;
        }
        if (CastMemberMovie?.Movie != null && !IsAdd)
        {
            SelectedMovieId = CastMemberMovie.Movie.Id;
        }
        @* OnInitialCodePlaceholder *@
        @* if (EmulatorCore?.Emulator != null && !IsAdd)
        {
            SelectedEmulatorId = EmulatorCore.Emulator.Id;
        } *@
    }

    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);

    private void HandleCastMemberChange(ChangeEventArgs changeEventArgs)
    {
        if (CastMemberMovie == null)
        {
            return;
        }

        if (changeEventArgs == null)
        {
            return;
        }

        if (changeEventArgs.Value == null)
        {
            return;
        }

        if (changeEventArgs.Value is string value && Guid.TryParse(value, out Guid selectedCastMemberId))
        {
            SelectedCastMemberId = selectedCastMemberId;
            var selectedCastMember = CastMemberList.FirstOrDefault(x => x.Id == SelectedCastMemberId);

            if (selectedCastMember != null)
            {
                CastMemberMovie.CastMember = selectedCastMember;
            }
        }

        // SpecializedCodeCastMemberPlaceholder
    }

    private void HandleMovieChange(ChangeEventArgs changeEventArgs)
    {
        if (CastMemberMovie == null)
        {
            return;
        }

        if (changeEventArgs == null)
        {
            return;
        }

        if (changeEventArgs.Value == null)
        {
            return;
        }

        if (changeEventArgs.Value is string value && Guid.TryParse(value, out Guid selectedMovieId))
        {
            SelectedMovieId = selectedMovieId;
            var selectedMovie = MovieList.FirstOrDefault(x => x.Id == SelectedMovieId);

            if (selectedMovie != null)
            {
                CastMemberMovie.Movie = selectedMovie;
            }
        }

        // SpecializedCodeMoviePlaceholder
    }

    // HandleChangeCodePlaceholder
}
