<h1>@Mode CastMemberMovie</h1>

<hr />
@if (CastMemberMovie is not null)
{
    <EditForm Model="CastMemberMovie" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))" OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @* PropertyFormCodePlaceholder *@

        <br />
        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The CastMemberMovie to upsert.
    [Parameter]
    public CastMemberMovie? CastMemberMovie { get; set; }

    // The database version of CastMemberMovie if a concurrency issue.
    [Parameter]
    public CastMemberMovie? DbCastMemberMovie { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel.
    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    // Handle form submission request.
    // isValid: True when field validation passed.
    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);

    // HandleChangeCodePlaceholder
}
