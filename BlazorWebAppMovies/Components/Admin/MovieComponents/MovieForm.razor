<h1>@Mode Movie</h1>

<hr />
@if (Movie is not null)
{
    <EditForm Model="Movie" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))" OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Title:
                <InputText @bind-Value="Movie.Title" @oninput="HandleTitleChange" class="form-control"/>
            </label>
        </div>
        <div class="mb-3">
            <label class="form-label">Year:
                <InputText @bind-Value="Movie.Year" @oninput="HandleYearChange" class="form-control"/>
            </label>
        </div>
        @* PropertyFormCodePlaceholder *@

        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public Movie? Movie { get; set; }

    [Parameter]
    public Movie? DbMovie { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string Mode => IsAdd ? "Add" : "Edit";

    @* DeclareListCodePlaceholder *@

    protected override void OnInitialized()
    {
        @* OnInitialCodePlaceholder *@
        @* if (EmulatorCore?.Emulator != null && !IsAdd)
        {
            SelectedEmulatorId = EmulatorCore.Emulator.Id;
        } *@
    }

    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);

    private void HandleTitleChange(ChangeEventArgs changeEventArgs)
    {
        if (Movie == null)
        {
            return;
        }

        if (changeEventArgs == null)
        {
            return;
        }

        if (changeEventArgs.Value == null)
        {
            return;
        }

        Movie.NormalizedTitle = ((string)changeEventArgs.Value).ToUpperInvariant();

        // SpecializedCodeTitlePlaceholder
    }

    private void HandleYearChange(ChangeEventArgs changeEventArgs)
    {
        if (Movie == null)
        {
            return;
        }

        if (changeEventArgs == null)
        {
            return;
        }

        if (changeEventArgs.Value == null)
        {
            return;
        }

        Movie.AlphanumericYear = new string (((string)changeEventArgs.Value).ToLowerInvariant().Where(char.IsLetterOrDigit).ToArray());

        // SpecializedCodeYearPlaceholder
    }

    // HandleChangeCodePlaceholder
}
